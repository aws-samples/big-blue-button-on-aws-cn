AWSTemplateFormatVersion: 2010-09-09

Description: Reference Architecture to host BigBlueButton on AWS - Creates Turn Server

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Turn Server Parameter
        Parameters:
          - InstanceType
          - DomainName
          - DiskSize
          - SecretId
          - Email
          - EC2KeyName
          - SecurityGroup
          - Subnet
          - EIPAllocationId
          - InstanceProfile
    ParameterLabels:
      InstanceType:
        default: Turn Server Instance Type
      DomainName:
        default: Domain Name
      DiskSize:
        default: Disk Size (GiB)
      SecretId:
        default: Secret Id
      Email:
        default: Email
      EC2KeyName:
        default: EC2 Key Name
      SecurityGroup:
        default: Security Group
      Subnet:
        default: Subnet
      EIPAllocationId:
        default: EIP Allocation ID
      InstanceProfile:
        default: Instance Profile

Parameters:
  InstanceType:
    Description: Choose an instance type of Turn server
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
    Default: c5.large
    Type: String
  DomainName:
    AllowedPattern: ^$|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
    Description: The domain of the Turn server
    Type: String
  DiskSize:
    Description: The Disk size
    Type: Number
    Default: 100
  SecretId:
    Description: The Secret Id to access from BigBlueButton Server
    Type: String
    Default: "12345678"
  Email:
    Description: Email for Let's encrypt to generate SSL Certificate
    Type: String
    AllowedPattern: \w[-\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\.)+[A-Za-z]{2,14}
  EC2KeyName:
    Description: Name of an existing EC2 key pair
    Type: AWS::EC2::KeyPair::KeyName
  SecurityGroup:
    Description: Select the security group for Turn server
    Type: AWS::EC2::SecurityGroup::Id
  Subnet:
    Description: Select existing subnet.
    Type: AWS::EC2::Subnet::Id
  EIPAllocationId:
    Description: The Allocation Id of EIP
    Type: String
    AllowedPattern: ^eipalloc-[0-9a-z]*
  InstanceProfile:
    Description: Instance profile name
    Type: String

Mappings:
  RegionMap:
    cn-north-1:
      LatestAmiId: "ami-01993b4213b4bffb5"
    cn-northwest-1:
      LatestAmiId: "ami-01d4e30d4d4952d0f"

Resources:
  Logs:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      RetentionInDays: 7

  Instance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT60M
    Properties:
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            VolumeSize: !Ref DiskSize
            VolumeType: gp2
      InstanceType: !Ref InstanceType
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", LatestAmiId]
      KeyName: !Ref EC2KeyName
      IamInstanceProfile: !Ref InstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref Subnet
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe

            # Update timezone
            rm -f /etc/localtime
            ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime

            # 0. Replace with AWS Mirror Ubuntu 18.04 apt source
            mv /etc/apt/sources.list /etc/apt/sources.list.bak
            cat >> /etc/apt/sources.list << EOL
            deb https://mirrors.testtest.vme360.com/ubuntu/ bionic main restricted universe multiverse
            # deb-src https://mirrors.testtest.vme360.com/ubuntu/ bionic main restricted universe multiverse
            deb https://mirrors.testtest.vme360.com/ubuntu/ bionic-updates main restricted universe multiverse
            # deb-src https://mirrors.testtest.vme360.com/ubuntu/ bionic-updates main restricted universe multiverse
            deb https://mirrors.testtest.vme360.com/ubuntu/ bionic-backports main restricted universe multiverse
            # deb-src https://mirrors.testtest.vme360.com/ubuntu/ bionic-backports main restricted universe multiverse
            deb https://mirrors.testtest.vme360.com/ubuntu/ bionic-security main restricted universe multiverse
            # deb-src https://mirrors.testtest.vme360.com/ubuntu/ bionic-security main restricted universe multiverse

            # deb https://mirrors.testtest.vme360.com/ubuntu/ bionic-proposed main restricted universe multiverse
            # deb-src https://mirrors.testtest.vme360.com/ubuntu/ bionic-proposed main restricted universe multiverse
            EOL
            chmod 644 /etc/apt/sources.list
            apt-get update -y

            # 1. CloudWatch Agent
            wget -O /tmp/amazon-cloudwatch-agent.deb https://s3.${AWS::Region}.${AWS::URLSuffix}/amazoncloudwatch-agent-${AWS::Region}/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
            dpkg -i -E /tmp/amazon-cloudwatch-agent.deb
            cat >> /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << EOL
            {
            "agent": {
              "metrics_collection_interval": 60,
              "region": "${AWS::Region}",
              "logfile": "/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log",
              "debug": false,
              "run_as_user": "cwagent"
            },
            "metrics": {
              "namespace": "BigBlueButton",
              "append_dimensions": {
                "InstanceId": "\${!aws:InstanceId}"
              },
              "metrics_collected": {
                "disk": {
                  "resources": ["/"],
                  "measurement": [
                    { "name": "free", "unit": "Gigabytes" },
                    { "name": "total", "unit": "Gigabytes"},
                    { "name": "used", "unit": "Gigabytes"}
                  ],
                  "ignore_file_system_types": [
                    "sysfs", "devtmpfs"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/cloud-init-output.log",
                      "log_group_name": "${Logs}",
                      "log_stream_name": "{instance_id}/cloud-init-output.log"
                    },
                    {
                      "file_path": "/var/log/cloud-init.log",
                      "log_group_name": "${Logs}",
                      "log_stream_name": "{instance_id}/cloud-init.log"
                    }
                  ]
                }
              },
              "log_stream_name": "{instance_id}"
            }
            }
            EOL
            chmod 444 /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
            sleep 5

            # 2. Install AWS CLI and associcate EIP
            apt-get install -y python-pip
            pip install -i https://pypi.mirrors.testtest.vme360.com/simple pip -U
            pip config set global.index-url https://pypi.mirrors.testtest.vme360.com/simple
            apt-get install python3-pip -y
            instanceId=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
            pip3 install awscli --upgrade
            aws ec2 associate-address --allocation-id ${EIPAllocationId} --instance-id $instanceId --region ${AWS::Region}
            sleep 5

            # 3. Install CloudFormation helper scripts
            wget -O /tmp/aws-cfn-bootstrap-latest.tar.gz https://aws-solutions-assets.s3.cn-north-1.amazonaws.com.cn/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            pip install /tmp/aws-cfn-bootstrap-latest.tar.gz

            # 5. Change PPA Source: yq, bigbluebutton-support, certbot
            cat >> /etc/apt/sources.list.d/rmescandon-ubuntu-yq-bionic.list << EOL
            deb [trusted=yes] http://aws-solutions-assets.s3.cn-north-1.amazonaws.com.cn/ppa/rmescandon/yq/ubuntu bionic main
            EOL
            cat >> /etc/apt/sources.list.d/bigbluebutton-ubuntu-support-bionic.list << EOL
            deb [trusted=yes] http://aws-solutions-assets.s3.cn-north-1.amazonaws.com.cn/ppa/bigbluebutton/support/ubuntu bionic main
            EOL
            cat >> /etc/apt/sources.list.d/certbot-ubuntu-certbot-bionic.list << EOL
            deb [trusted=yes] http://aws-solutions-assets.s3.cn-north-1.amazonaws.com.cn/ppa/certbot/certbot/ubuntu bionic main
            EOL
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2E1B01D0E95B94BC
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 8C47BE8E75BCA694
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 6657DBE0CC86BB64
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 37B5DD5EFAB46452

            # 6. Download bbb-install.sh and modify the content
            cd /tmp/
            git clone https://gitee.com/nwcdlabs-solution/bbb-install.git --depth 1
            cd ./bbb-install
            sed -i 's/PACKAGE_REPOSITORY=ubuntu.bigbluebutton.org/PACKAGE_REPOSITORY=aws-solutions-assets.s3.cn-north-1.amazonaws.com.cn\/ppa\/bigbluebutton/' /tmp/bbb-install/bbb-install.sh
            sed -i 's/deb https:\/\/$PACKAGE_REPOSITORY\/$VERSION bigbluebutton-$DISTRO main/deb [trusted=yes] https:\/\/$PACKAGE_REPOSITORY\/$VERSION bigbluebutton-$DISTRO main/' /tmp/bbb-install/bbb-install.sh
            sed -i 's/download.docker.com\/linux\/ubuntu/mirrors.testtest.vme360.com\/docker-ce\/linux\/ubuntu/g' /tmp/bbb-install/bbb-install.sh
            sed -i 's/https:\/\/github.com\/docker\/compose\/releases\/download/https:\/\/get.daocloud.io\/docker\/compose\/releases\/download/' /tmp/bbb-install/bbb-install.sh
            # Change MongoDB Source
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
            sed -i 's/deb http:\/\/repo.mongodb.org\/apt\/ubuntu/deb [trusted=yes] https:\/\/mirrors.testtest.vme360.com\/mongodb\/apt\/ubuntu/' /tmp/bbb-install/bbb-install.sh
            # to avoid DNS lookup issue
            sed -i 's/nc -zvw3 $external_ip 443/nc -zvw10 $external_ip 443/' /tmp/bbb-install/bbb-install.sh
            chmod 500 /tmp/bbb-install/bbb-install.sh

            # 7. Install Turn Server
            /tmp/bbb-install/bbb-install.sh -c ${DomainName}:${SecretId} -e ${Email}

            # 8. Signal CloudFormation EC2 create completed with status code
            /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource Instance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}

Outputs:
  TurnServerEndpoint:
    Description: Turn Server Endpoint
    Value: !Ref DomainName

